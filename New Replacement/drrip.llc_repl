#include "cache.h"
#include "ooo_cpu.h"
#define maxRRPV 3
#define NUM_POLICY 2
#define SDM_SIZE 32
#define TOTAL_SDM_SETS NUM_CPUS *NUM_POLICY *SDM_SIZE
#define BIP_MAX 32
#define PSEL_WIDTH 10
#define PSEL_MAX ((1 << PSEL_WIDTH) - 1)
#define PSEL_THRS PSEL_MAX / 2
int Back_inv=0;

uint32_t rrpv[LLC_SET][LLC_WAY],
    bip_counter = 0,
    PSEL[NUM_CPUS];
unsigned rand_sets[TOTAL_SDM_SETS];

void CACHE::llc_initialize_replacement()
{
    cout << "Initialize DRRIP state" << endl;

    for (int i = 0; i < LLC_SET; i++)
    {
        for (int j = 0; j < LLC_WAY; j++)
            rrpv[i][j] = maxRRPV;
    }

    // randomly selected sampler sets
    srand(time(NULL));
    unsigned long rand_seed = 1;
    unsigned long max_rand = 1048576;
    uint32_t my_set = LLC_SET;
    int do_again = 0;
    for (int i = 0; i < TOTAL_SDM_SETS; i++)
    {
        do
        {
            do_again = 0;
            rand_seed = rand_seed * 1103515245 + 12345;
            rand_sets[i] = ((unsigned)((rand_seed / 65536) % max_rand)) % my_set;
            printf("Assign rand_sets[%d]: %u  LLC: %u\n", i, rand_sets[i], my_set);
            for (int j = 0; j < i; j++)
            {
                if (rand_sets[i] == rand_sets[j])
                {
                    do_again = 1;
                    break;
                }
            }
        } while (do_again);
        printf("rand_sets[%d]: %d\n", i, rand_sets[i]);
    }

    for (int i = 0; i < NUM_CPUS; i++)
        PSEL[i] = 0;
}

int is_it_leader(uint32_t cpu, uint32_t set)
{
    uint32_t start = cpu * NUM_POLICY * SDM_SIZE,
             end = start + NUM_POLICY * SDM_SIZE;

    for (uint32_t i = start; i < end; i++)
        if (rand_sets[i] == set)
            return ((i - start) / SDM_SIZE);

    return -1;
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
    // do not update replacement state for writebacks
    if (type == WRITEBACK)
    {
        rrpv[set][way] = maxRRPV - 1;
        return;
    }

    // cache hit
    if (hit)
    {
        rrpv[set][way] = 0; // for cache hit, DRRIP always promotes a cache line to the MRU position
        return;
    }

    // cache miss
    int leader = is_it_leader(cpu, set);

    if (leader == -1)
    { // follower sets
        if (PSEL[cpu] > PSEL_THRS)
        { // follow BIP
            rrpv[set][way] = maxRRPV;

            bip_counter++;
            if (bip_counter == BIP_MAX)
                bip_counter = 0;
            if (bip_counter == 0)
                rrpv[set][way] = maxRRPV - 1;
        }
        else // follow SRRIP
            rrpv[set][way] = maxRRPV - 1;
    }
    else if (leader == 0)
    { // leader 0: BIP
        if (PSEL[cpu] > 0)
            PSEL[cpu]--;
        rrpv[set][way] = maxRRPV;

        bip_counter++;
        if (bip_counter == BIP_MAX)
            bip_counter = 0;
        if (bip_counter == 0)
            rrpv[set][way] = maxRRPV - 1;
    }
    else if (leader == 1)
    { // leader 1: SRRIP
        if (PSEL[cpu] < PSEL_MAX)
            PSEL[cpu]++;
        rrpv[set][way] = maxRRPV - 1;
    }
    else // WE SHOULD NOT REACH HERE
        assert(0);
}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{

    uint32_t way = 0;
    int exist_only_in_LLC[LLC_WAY],exist_only_in_caller_L2[LLC_WAY];
    cout<<"Back_invalidation count "<<Back_inv<<endl;
    //reset flags
    for (int i = 0; i < LLC_WAY; i++)
                {exist_only_in_LLC[i] = 0;exist_only_in_caller_L2[i]=0;}
    //check invalid block first            
    for (way = 0; way < NUM_WAY; way++)
    {
        if (block[set][way].valid == false)
        {
            cout << "invalid found" << endl;
            DP(if (warmup_complete[cpu]) {
            cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id << " invalid set: " << set << " way: " << way;
            cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
            cout << dec << " lru: " << block[set][way].lru << endl; });
            return way;
        }
    }
    
        int Found_in_Upper_Levels, current_cpu,cpu_count,my_cpu,Flag_not_in_L2=0,Flag_in_my_L2_only=0;
        unsigned long long t;
        if (way == NUM_WAY)
        {  
            for (way = 0; way < NUM_WAY; way++)
            { 
                exist_in_upper_levels=0;cpu_count=0;my_cpu=0;
                for(current_cpu=0;current_cpu<NUM_CPUS;current_cpu++)   
                 {  //Search a given LLC Block in all L2 caches
                 Found_in_Upper_Levels=(ooo_cpu[current_cpu].L2C.search_entry(block[set][way].address));
                 
                 if(Found_in_Upper_Levels==0) 
                    {   //Set flag that indicate, LLC block is found in some L2      
                          
                           Flag_not_in_L2=1;   
                           exist_only_in_LLC[way] = 1;
                    }
                 if(Found_in_Upper_Levels==1)
                   {    //set flags to check if given block exist only in caller L2 cache
                                 cpu_count++;
                                if(current_cpu==(int)cpu) my_cpu=1;
                                 
                                  

                   }    


                  }
             if (cpu_count == 1 && my_cpu == 1)
                { //check if LLC block exist in same processor's L2 cache which is calling find victim
                   exist_only_in_caller_L2[way] = 1;
                   Flag_in_my_L2_only=1;
                }
            }

            
         
      if(Flag_not_in_L2==1)
              //CASE 1:find victim according to drrip algorithm by considering blocks that exist only in LLC
            {  while (1)
              { 
                for (int i = 0; i < LLC_WAY; i++)
                
                {
                    if (rrpv[set][i] == maxRRPV && exist_only_in_LLC[i] == 1) return i;
                    
                }
                    for (int i = 0; i < LLC_WAY; i++)
                    {
                        if (exist_only_in_LLC[i] == 1)
                            { rrpv[set][i]++;}
                    }
                
                   
            }      
        }
        else  if (Flag_in_my_L2_only==1)
            {  //CASE 2:find victim according to drrip algorithm by considering blocks that exist only in caller's private cache
                while (1)
                {
                    for (int i = 0; i < LLC_WAY; i++)
                    {
                        if (rrpv[set][i] == maxRRPV && exist_only_in_caller_L2[i] == 1)
                            return i;
                    }        

                        for (int i = 0; i < LLC_WAY; i++)
                            if (exist_only_in_caller_L2[i] == 1) {rrpv[set][i]++;}
                    
                }
            }
            //call normal drrip algo if CASE 1 and CASE 2 fails
                while (1)
                { 
                    for (int i = 0; i < LLC_WAY; i++)
                       { if (rrpv[set][i] == maxRRPV)
                           {Back_inv++; return i;}
                       }
                    for (int i = 0; i < LLC_WAY; i++)
                        rrpv[set][i]++;
                      
              }
            
        }
        

}


// use this function to print out your own stats at the end of simulation
void CACHE::llc_replacement_final_stats()
{
}
