#include "cache.h"

#define maxRRPV 3
uint32_t rrpv[LLC_SET][LLC_WAY];

// initialize replacement state
void CACHE::llc_initialize_replacement()
{
    cout << "Initialize SRRIP state" << endl;

    for (int i=0; i<LLC_SET; i++) {
        for (int j=0; j<LLC_WAY; j++) {
            rrpv[i][j] = maxRRPV;
        }
    }
}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
   // find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{

    uint32_t way = 0;
    int exist_only_in_LLC[LLC_WAY],exist_only_in_caller_L2[LLC_WAY];
    cout<<"Back_invalidation count "<<Back_inv<<endl;
    //reset flags
    for (int i = 0; i < LLC_WAY; i++)
                {exist_only_in_LLC[i] = 0;exist_only_in_caller_L2[i]=0;}
    //check invalid block first            
    for (way = 0; way < NUM_WAY; way++)
    {
        if (block[set][way].valid == false)
        {
            cout << "invalid found" << endl;
            DP(if (warmup_complete[cpu]) {
            cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id << " invalid set: " << set << " way: " << way;
            cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
            cout << dec << " lru: " << block[set][way].lru << endl; });
            return way;
        }
    }
    
        int Found_in_Upper_Levels, current_cpu,cpu_count,my_cpu,Flag_not_in_L2=0,Flag_in_my_L2_only=0;
        unsigned long long t;
        if (way == NUM_WAY)
        {  
            for (way = 0; way < NUM_WAY; way++)
            { 
                exist_in_upper_levels=0;cpu_count=0;my_cpu=0;
                for(current_cpu=0;current_cpu<NUM_CPUS;current_cpu++)   
                 {  //Search a given LLC Block in all L2 caches
                 Found_in_Upper_Levels=(ooo_cpu[current_cpu].L2C.search_entry(block[set][way].address));
                 
                 if(Found_in_Upper_Levels==0) 
                    {   //Set flag that indicate, LLC block is found in some L2      
                          
                           Flag_not_in_L2=1;   
                           exist_only_in_LLC[way] = 1;
                    }
                 if(Found_in_Upper_Levels==1)
                   {    //set flags to check if given block exist only in caller L2 cache
                                 cpu_count++;
                                if(current_cpu==(int)cpu) my_cpu=1;
                                 
                                  

                   }    


                  }
             if (cpu_count == 1 && my_cpu == 1)
                { //check if LLC block exist in same processor's L2 cache which is calling find victim
                   exist_only_in_caller_L2[way] = 1;
                   Flag_in_my_L2_only=1;
                }
            }

            
         
      if(Flag_not_in_L2==1)
              //CASE 1:find victim according to drrip algorithm by considering blocks that exist only in LLC
            {  while (1)
              { 
                for (int i = 0; i < LLC_WAY; i++)
                
                {
                    if (rrpv[set][i] == maxRRPV && exist_only_in_LLC[i] == 1) return i;
                    
                }
                    for (int i = 0; i < LLC_WAY; i++)
                    {
                        if (exist_only_in_LLC[i] == 1)
                            { rrpv[set][i]++;}
                    }
                
                   
            }      
        }
        else  if (Flag_in_my_L2_only==1)
            {  //CASE 2:find victim according to drrip algorithm by considering blocks that exist only in caller's private cache
                while (1)
                {
                    for (int i = 0; i < LLC_WAY; i++)
                    {
                        if (rrpv[set][i] == maxRRPV && exist_only_in_caller_L2[i] == 1)
                            return i;
                    }        

                        for (int i = 0; i < LLC_WAY; i++)
                            if (exist_only_in_caller_L2[i] == 1) {rrpv[set][i]++;}
                    
                }
            }
            //call normal drrip algo if CASE 1 and CASE 2 fails
                while (1)
                { 
                    for (int i = 0; i < LLC_WAY; i++)
                       { if (rrpv[set][i] == maxRRPV)
                           {Back_inv++; return i;}
                       }
                    for (int i = 0; i < LLC_WAY; i++)
                        rrpv[set][i]++;
                      
              }
            
        }
        

}
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
    string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit)
        TYPE_NAME += "_HIT";
    else
        TYPE_NAME += "_MISS";

    if ((type == WRITEBACK) && ip)
        assert(0);

    // uncomment this line to see the LLC accesses
    // cout << "CPU: " << cpu << "  LLC " << setw(9) << TYPE_NAME << " set: " << setw(5) << set << " way: " << setw(2) << way;
    // cout << hex << " paddr: " << setw(12) << paddr << " ip: " << setw(8) << ip << " victim_addr: " << victim_addr << dec << endl;
    
    if (hit)
        rrpv[set][way] = 0;
    else
        rrpv[set][way] = maxRRPV-1;
}

// use this function to print out your own stats at the end of simulation
void CACHE::llc_replacement_final_stats()
{

}
